/*
 * TCSS 342 Winter 2013
 * Assignment 1
 */

/**
 * A Generic Simple Array Stack class that will implement StackADT.
 * 
 * @author Raymond Luu
 * @version Winter 2013
 * 
 * @param <E> the generic type parameter
 */
public class GenericSimpleArrayStack<E> implements StackADT<E>
{
  
  /**
   * Default capacity of Stack.
   */
  private static final int DEFAULT_CAPACITY = 10; // a default size for Stack
  
  /**
   * Size of the Stack.
   */
  private int my_size;
  
  /**
   * Top of the Stack.
   */
  private int my_top;
  
  /**
   * An array to hold the elements in this Stack.
   */
  private E[] my_elements;
  
  /**
   * Constructs an empty ArrayStack.
   */
  public GenericSimpleArrayStack()
  {
    clear();
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public void push(final E the_element)
  {
    my_size++;
    my_top++;
    my_elements[my_top] = the_element;
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public E pop()
  {
    if (my_top < 0)
    {
      throw new ArrayIndexOutOfBoundsException("Cannot 'pop' the element at index " + size()
                                               + "; in a stack of size " + size());
    }
    my_size--;
    my_top--;
    return my_elements[my_top + 1];
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public E peek()
  {
    return my_elements[my_top];
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public int size()
  {
    return my_size;
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public boolean isEmpty()
  {
    boolean status = false;
    if (my_size == 0)
    {
      status = true;
    }
    return status;
  }
  
  /**
   * {@inheritDoc}
   */
  @Override
  public String toString()
  {
    final StringBuilder str = new StringBuilder();
    
    for (int i = my_top; i >= 0; i--)
    {
      str.append(my_elements[i]);
      str.append("\n");
    }
    return str.toString();
  }
  
  /**
   * Empty the ArrayStack.
   */
  private void clear()
  {
    my_size = 0;
    my_top = -1; // empty stack top is -1
    my_elements = (E[]) new Object[DEFAULT_CAPACITY];
  }
  
}
