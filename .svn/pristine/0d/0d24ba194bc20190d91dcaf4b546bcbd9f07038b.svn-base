/* * TCSS 342 Winter 2013 * Assignment 1 */import java.awt.BorderLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;/** * A simple GUI to demonstrate push and pop Stack operations. *  * @author Alan Fowler acfowler@uw.edu * @version Winter 2013 */@SuppressWarnings("serial")public class StackDemoGUI extends JPanel{  /**   * The default width for text fields and text areas.   */  private static final int TEXT_WIDTH = 20;    /**   * The default height for text areas.   */  private static final int TEXT_HEIGHT = 6;    /**   * The width used in various margins and insets.   */  private static final int PADDING = 20;  /**   * Displays current stack contents.   */  private final JTextArea my_stack_area;  /**   * Input text field.   */  private final JTextField my_input_text;    /**   * Displays all actions performed on the Stack.   */  private final JTextArea my_action_area;    /**   * A button used to push an element on the Stack.   */  private final JButton my_push_button;  /**   * The stack used in the demo.   */  private final StackADT<String> my_stack = new GenericSimpleArrayStack<String>();  /**   * Sets up the GUI.   */  public StackDemoGUI()  {    super();        my_input_text = new JTextField(TEXT_WIDTH);    my_stack_area = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);    my_action_area = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);    my_push_button = new JButton("Push");        setupComponets();  }  /**   * Helper method to perform the work of setting up the GUI components.   */  private void setupComponets()  {    my_push_button.addActionListener(new PushListener());    my_push_button.setMnemonic(KeyEvent.VK_U);        final JButton pop_button = new JButton("Pop");    pop_button.addActionListener(new PopListener());    pop_button.setMnemonic(KeyEvent.VK_O);        final JLabel input_label = new JLabel("Add to stack: ");        my_input_text.setEditable(true);        my_stack_area.setMargin(        new Insets(PADDING, PADDING, PADDING, PADDING));    my_stack_area.setEditable(false);    my_stack_area.setFocusable(false);    my_stack_area.setText("The Stack is empty.");        my_action_area.setMargin(        new Insets(PADDING, PADDING, PADDING, PADDING));    my_action_area.setEditable(false);    my_action_area.setFocusable(false);    final JPanel input_panel = new JPanel();    input_panel.add(input_label);    input_panel.add(my_input_text);    input_panel.add(my_push_button);    input_panel.add(pop_button);    setLayout(new BorderLayout());    add(new JScrollPane(my_stack_area), BorderLayout.NORTH);    add(input_panel, BorderLayout.CENTER);    add(new JScrollPane(my_action_area), BorderLayout.SOUTH);    setBorder(BorderFactory.createEmptyBorder(              PADDING, PADDING, PADDING, PADDING));  }  /**   * Creates and displays the application frame.   */  public void display()  {    final JFrame frame = new JFrame("Stack Demo");    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.setContentPane(this);        frame.pack();    frame.setResizable(false);    frame.setLocationRelativeTo(null);    frame.setVisible(true);    my_input_text.grabFocus();    getRootPane().setDefaultButton(my_push_button);  }  /**   * An action listener for the push button.   */  private class PushListener implements ActionListener  {    /**     * Adds the contents of the user entry text field to the top of this stack.     *      * @param the_event incoming event     */    public void actionPerformed(final ActionEvent the_event)    {      final String to_push = my_input_text.getText();      if (to_push.length() == 0)      {        my_action_area.append("Cannot push empty data.\n");      }      else      {        my_stack.push(to_push);        my_action_area.append("\"" + to_push + "\"" + " was pushed onto " + "the stack.\n");        my_stack_area.setText(my_stack.toString());        my_stack_area.setCaretPosition(0); // forces scroll up        my_input_text.setText(null); // clears input field      }      my_input_text.grabFocus();    }  }  /**   * An action listener for the pop button.   */  private class PopListener implements ActionListener  {    /**     * removes the element at the top of this stack.     *      * @param the_event incoming event     */    public void actionPerformed(final ActionEvent the_event)    {      if (my_stack.isEmpty())      {        my_action_area.append("Cannot pop from an empty stack.\n");      }      else      {        final String popped = my_stack.pop();        my_action_area.append("\"" + popped + "\"" + " was popped off " + "the stack.\n");        if (my_stack.isEmpty())        {          my_stack_area.setText("The Stack is empty.");        }        else        {          my_stack_area.setText(my_stack.toString());        }        my_stack_area.setCaretPosition(0);        my_input_text.setText(null);      }      my_input_text.grabFocus();    }  }}